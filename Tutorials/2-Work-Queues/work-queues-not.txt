WORK QUEUES (Multiple-Receiver)

We'll create a Work Queue that will be used to distribute time-consuming tasks among multiple workers.

The main idea behind Work Queues is to avoid doing a resource-intensive task immediately and having to wait for it to complete.
Instead we schedule the task to be done later. 
We encapsulate a task as a message and send it to a queue. 
A worker process running in the background will pop the tasks and eventually execute the job. 
When you run many workers the tasks will be shared between them.

If a consumer dies (its channel is closed, connection is closed, or TCP connection is lost) without sending an ack, 
	RabbitMQ will understand that a message wasn't processed fully and will re-queue it. 
If there are other consumers online at the same time, it will then quickly redeliver it to another consumer.
That way you can be sure that no message is lost, even if the workers occasionally die.

Manual message acknowledgments are turned on by default. 
In previous examples we explicitly turned them off by setting the autoAck ("automatic acknowledgement mode") parameter to true.
 It's time to remove this flag and manually send a proper acknowledgment from the worker, once we're done with a task.

When RabbitMQ quits or crashes it will forget the queues and messages unless you tell it not to. 
Two things are required to make sure that messages aren't lost: we need to mark both the queue and messages as durable.

At this point we're sure that the task_queue queue won't be lost even if RabbitMQ restarts. 
Now we need to mark our messages as persistent - by setting IBasicProperties.SetPersistent to true.

Fair Dispatch
(Birden fazla consumer var ise kullanır. Consumer bir mesaj aldı ve işliyor ise o consumer'a tekrar mesaj gondermez. 
Consumer bussy durumda olur. Consumer ack donus yaptıgı zaman musaittir ve bir sonraki mesajı alabilir.)
In order to change this behavior we can use the BasicQos method with the prefetchCount = 1 setting. 
This tells RabbitMQ not to give more than one message to a worker at a time. 
Or, in other words, don't dispatch a new message to a worker until it has processed and acknowledged the previous one. 
Instead, it will dispatch it to the next worker that is not still busy.
channel.BasicQos(0, 1, false);


Using message acknowledgments and BasicQos you can set up a work queue. 
The durability options let the tasks survive even if RabbitMQ is restarted.